// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: skills.sql

package database

import (
	"context"
	"time"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (
  id, title, created_at, updated_at
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, title, created_at, updated_at
`

type CreateSkillParams struct {
	ID        interface{}
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill,
		arg.ID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSkill = `-- name: CreateUserSkill :one
INSERT INTO user_skills (
  user_id, skill_id
) VALUES (
  ?, ?
)
RETURNING user_id, skill_id
`

type CreateUserSkillParams struct {
	UserID  interface{}
	SkillID interface{}
}

func (q *Queries) CreateUserSkill(ctx context.Context, arg CreateUserSkillParams) (UserSkill, error) {
	row := q.db.QueryRowContext(ctx, createUserSkill, arg.UserID, arg.SkillID)
	var i UserSkill
	err := row.Scan(&i.UserID, &i.SkillID)
	return i, err
}

const getSkillByTitle = `-- name: GetSkillByTitle :one
SELECT id, title, created_at, updated_at FROM skills
WHERE title = ?
`

func (q *Queries) GetSkillByTitle(ctx context.Context, title string) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkillByTitle, title)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSkillsByUserID = `-- name: GetSkillsByUserID :many
SELECT user_id, skill_id, id, title, created_at, updated_at
FROM user_skills
INNER JOIN skills ON skills.id = user_skills.skill_id
WHERE user_skills.user_id = ?
`

type GetSkillsByUserIDRow struct {
	UserID    interface{}
	SkillID   interface{}
	ID        interface{}
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetSkillsByUserID(ctx context.Context, userID interface{}) ([]GetSkillsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSkillsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSkillsByUserIDRow
	for rows.Next() {
		var i GetSkillsByUserIDRow
		if err := rows.Scan(
			&i.UserID,
			&i.SkillID,
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
